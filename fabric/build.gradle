plugins {
    alias libs.plugins.curseforgegradle
    alias libs.plugins.minotaur
}

loom {
    runs.configureEach {
        source = sourceSets.test
    }

    runs {
        gametest {
            inherit server
            name "Game Test"
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=build/junit.xml"
            runDir "build/gametest"
        }
    }

    runs.configureEach {
        name = 'Fabric: ' + name
        ideConfigGenerated = true
    }

    mixin {
        defaultRefmapName = 'biomesquisher.refmap.json'
    }
}

dependencies {
    modImplementation libs.fabric.loader
    modImplementation libs.fabric.api

    include libs.pngj

    annotationProcessor libs.mixinextras.fabric
    implementation libs.mixinextras.fabric
    include libs.mixinextras.fabric

    testImplementation sourceSets.main.output

    compileOnly project(":common")
    testCompileOnly project(":common")
    testCompileOnly project(":common").sourceSets.test.output
}

processResources {
    from project(":common").sourceSets.main.resources
}

tasks.named('compileJava', JavaCompile).configure {
    source(project(":common").sourceSets.main.allSource)
}

import io.github.groovymc.modsdotgroovy.ConvertToFabricJsonTask
var testMdg = tasks.register('testModsDotGroovyToFabricJson', ConvertToFabricJsonTask) {
    input.set new File(project(':common').sourceSets.test.resources.srcDirs.find(), "mods.groovy")
    dependsOn(project(':common').configurations.modsDotGroovy)
    dslClasspath.from(project(':common').configurations.modsDotGroovy)
}

processTestResources {
    dependsOn testMdg
    exclude 'mods.groovy'
    from(testMdg.get().output.get().asFile) {
        into ''
    }
    from project(":common").sourceSets.test.resources
}

tasks.named('compileTestJava', JavaCompile).configure {
    source(project(":common").sourceSets.test.allSource)
}

sourcesJar {
    from project(":common").sourceSets.main.allSource
}

javadocJar {
    from project(":common").sourceSets.main.allJava
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (System.getenv('CURSEFORGE_KEY')) {
    tasks.register('curseforge', TaskPublishCurseForge) {
        disableVersionDetection()
        apiToken = System.getenv('CURSEFORGE_KEY')
        def projectId = '930256'
        def mainFile = upload(projectId, tasks.remapJar)
        mainFile.displayName = "${project.modname} [Fabric/Quilt] v$project.version"
        mainFile.releaseType = "${project.releasetype}"
        mainFile.addModLoader('Fabric', 'Quilt')
        mainFile.addGameVersion("${libs.versions.minecraft.get()}")
        mainFile.addRequirement("fabric-api")
        mainFile.changelog = ''
    }

    afterEvaluate {
        tasks.curseforge.dependsOn tasks.remapJar
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY')
        projectId = 'XiRvJdl1'
        versionNumber = "$project.version"
        versionType = "${project.releasetype}"
        detectLoaders = false
        uploadFile = remapJar
        gameVersions = ["${libs.versions.minecraft.get()}"]
        loaders = ['quilt','fabric']
        dependencies {
            required.project 'fabric-api'
        }
        syncBodyFrom = rootProject.file("SHORT.md").text
    }
}
