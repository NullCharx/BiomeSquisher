plugins {
    alias libs.plugins.curseforgegradle
    alias libs.plugins.minotaur
}

apply plugin: 'dev.architectury.loom'

loom {
    mods {
        create("${project.modid}tests") {
            sourceSet sourceSets.test
        }
    }

    runs {
        gametest {
            inherit server
            forgeTemplate('server')
            name "Game Test"
            vmArg "-Dneoforge.enableGameTest=true"
            vmArg "-Dneoforge.gameTestServer=true"
            vmArg "-Dneoforge.enabledGameTestNamespaces=${project.modid},${project.modid}tests"
            runDir "build/gametest"
        }
    }

    runs.configureEach {
        name = 'NeoForge: ' + name
        ideConfigGenerated = true
    }
}

dependencies {
    neoForge libs.neoforge

    compileOnly project(":common")
    testCompileOnly project(":common")
    testCompileOnly project(":common").sourceSets.test.output

    implementation libs.pngj
    include libs.pngj
    forgeRuntimeLibrary libs.pngj

    testImplementation sourceSets.main.output

    implementation libs.mixinextras.neoforge
    include libs.mixinextras.neoforge
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

processResources {
    from project(":common").sourceSets.main.resources

    doLast {
        fileTree(dir: outputs.files.asPath, include: "*.mixins.json").each { File file ->
            def obj = new JsonSlurper().parse(file)
            if (obj.refmap) {
                obj.remove('refmap')
            }
            file.text = JsonOutput.toJson(obj)
        }
    }
}

tasks.named('compileJava', JavaCompile).configure {
    source(project(":common").sourceSets.main.allSource)
}

import io.github.groovymc.modsdotgroovy.ConvertToTomlTask
var testMdg = tasks.register('testModsDotGroovyToToml', ConvertToTomlTask) {
    input.set new File(project(':common').sourceSets.test.resources.srcDirs.find(), "mods.groovy")
    dependsOn(project(':common').configurations.modsDotGroovy)
    dslClasspath.from(project(':common').configurations.modsDotGroovy)
}

processTestResources {
    dependsOn testMdg
    exclude 'mods.groovy'
    from(testMdg.get().output.get().asFile) {
        into 'META-INF'
    }
    from project(":common").sourceSets.test.resources

    doLast {
        fileTree(dir: outputs.files.asPath, include: "*.mixins.json").each { File file ->
            def obj = new JsonSlurper().parse(file)
            if (obj.refmap) {
                obj.remove('refmap')
            }
            file.text = JsonOutput.toJson(obj)
        }
    }
}

tasks.named('compileTestJava', JavaCompile).configure {
    source(project(":common").sourceSets.test.allSource)
}

sourcesJar {
    from project(":common").sourceSets.main.allSource
}

javadocJar {
    from project(":common").sourceSets.main.allJava
}

import net.darkhax.curseforgegradle.TaskPublishCurseForge

if (System.getenv('CURSEFORGE_KEY')) {
    tasks.register('curseforge', TaskPublishCurseForge) {
        disableVersionDetection()
        apiToken = System.getenv('CURSEFORGE_KEY')
        def projectId = '930256'
        def mainFile = upload(projectId, tasks.remapJar)
        mainFile.displayName = "${project.modname} [NeoForge] v$project.version"
        mainFile.releaseType = "${project.releasetype}"
        mainFile.addModLoader('NeoForge')
        mainFile.addGameVersion("${libs.versions.minecraft.get()}")
        mainFile.changelog = ''
    }

    afterEvaluate {
        tasks.curseforge.dependsOn tasks.remapJar
    }
}

if (System.getenv('MODRINTH_KEY')) {
    modrinth {
        token = System.getenv('MODRINTH_KEY')
        projectId = 'XiRvJdl1'
        versionNumber = "$project.version"
        versionType = "${project.releasetype}"
        detectLoaders = false
        uploadFile = tasks.remapJar
        gameVersions = ["${libs.versions.minecraft.get()}"]
        loaders = ['neoforge']
        dependencies {}
    }
}

